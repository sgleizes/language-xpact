'scopeName': 'source.pact'
'name': 'xPact'
'fileTypes': [
  'pact'
  'xpact'
]

# See https://macromates.com/manual/en/language_grammars.html#naming_conventions
'patterns': [
  # Function commands
  {
    'match': '(?i:^[\\s\\t]*(print|break|sleep|at|sync|repeat|stop)[\\s\\t])'
    'name': 'entity.name.function.pact'
  }
  # Contract commands
  {
    'match': '(>|<|>!|<!)[\\s\\t]*([\\w/]+)[\\s\\t]*([0-9a-fA-F]{2}\\s)?([0-9a-fA-F]{2}\\s)?'
    'captures':
      '1':
        'name': 'entity.name.tag.pact'
      '2':
        'name': 'constant.other.pact'
      '3':
        'name': 'entity.name.tag.pact'
      '4':
        'name': 'entity.name.type.pact'
  }
  # Packet bytegen
  {
    'match': '([0-9a-fA-F.]{2}\\\[[0-9]+\\\])'
    'captures':
      '1':
        'name': 'support.constant.pact'
  }

  # Variable assignment and override
  {
    'match': '^(\\w+)[\\s\\t]*='
    'captures':
      '1':
        'name': 'variable.other.pact'
  }
  {
    'match': '(\\\[\\w+([\\s\\t]+\\w+)\\\])'
    'captures':
      '1':
        'name': 'variable.other.pact'
  }

  # String literals
  {
    'begin': '"'
    'end': '"'
    'name': 'string.quoted.double.pact'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escaped.pact'
      }
    ]
  }
  {
    'begin': '\''
    'end': '\''
    'name': 'string.quoted.single.pact'
    'patterns': [
      {
        'match': '\\\\.'
        'name': 'constant.character.escaped.pact'
      }
    ]
  }

  # Comments
  {
    'begin': '(?=/\\*)'
    'end': '(?<!/)\\*/'
    'name': 'comment.block.pact'
  }
  {
    'match': '\\s*#.*$'
    'name': 'comment.line.number-sign.pact'
  }
]
